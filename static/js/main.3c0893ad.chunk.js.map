{"version":3,"sources":["components/Header/Header.module.css","api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","assets/images/zoom.jpg","redux/dialogs-reducer.ts","components/Users/users.module.css","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.tsx","components/Navbar/Navbar.tsx","api/users-api.ts","utils/validators/object-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/Paginator/Paginator.module.css"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodesEnum","ResultCodesForCaptchaEnum","axios","create","withCredentials","baseURL","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","Navbar","s","nav","item","to","activeClassName","activeLink","active","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","payload","count","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","onClick","selectedPage","pageNumber","e","User","user","alt","src","small","userPhoto","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","disabled","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","UsersContainer","this","pageTitle","Preloader","Component","compose","connect","bind","page","totalCount","Header","header","href","title","loginBlock","isAuth","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","required","undefined","style","formSummaryError","CaptchaIsRequired","length","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","promise","all","JSApp","ReactDOM","document","getElementById","maxLengthCreator","maxLength"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,wSCMlDC,EAAa,SACXC,GACP,OAAOC,IAASC,IAAiB,WAAaF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFjEN,EAAa,SAIZC,GACN,OAAOC,IAASC,IAAY,kBAAoBF,GAAQG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALnEN,EAAa,SAOTO,GACT,OAAOL,IAASM,IAAT,iBAAgD,CAACD,OAAQA,IAASH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SARpFN,EAAa,SAUZS,GACN,IAAMC,EAAW,IAAIC,SAGrB,OAFAD,EAASE,OAAO,QAASH,GAElBP,IAASM,IAAT,gBAA0EE,EAAU,CACvFG,QAAS,CACL,eAAgB,yBAErBT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAlBdN,EAAa,SAoBVc,GACR,OAAOZ,IAASM,IAAT,UAAyCM,GAASV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCvB7ES,EAAe,CACjBC,MAAO,CACL,CAAEC,GAAI,EAAGC,QAAS,mBAAoBC,WAAY,IAClD,CAAEF,GAAI,EAAGC,QAAS,kBAAmBC,WAAY,IACjD,CAAEF,GAAI,EAAGC,QAAS,eAAgBC,WAAY,IAEhDL,QAAS,KACTP,OAAQ,IAsCGa,EAAU,CACrBC,qBAAsB,SAACC,GAAD,MAA0B,CAACC,KAAM,sBAAuBD,gBAC9EE,eAAgB,SAACV,GAAD,MAA2B,CAACS,KAAM,8BAA+BT,YACjFW,UAAW,SAAClB,GAAD,MAAqB,CAACgB,KAAM,wBAAyBhB,WAChEmB,WAAY,SAACC,GAAD,MAAqB,CAACJ,KAAM,yBAA0BI,WAClEC,iBAAkB,SAACC,GAAD,MAAyB,CAACN,KAAM,gCAAiCM,YAGxEC,EAAiB,SAAC7B,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACxChC,EAAsBC,GADkB,OACrDK,EADqD,OAE3DyB,EAASX,EAAQI,eAAelB,IAF2B,2CAA/B,uDAIjB2B,EAAY,SAAChC,GAAD,8CAA+B,WAAO8B,GAAP,eAAAC,EAAA,sEACrChC,EAAqBC,GADgB,OAClDK,EADkD,OAEtDyB,EAASX,EAAQK,UAAUnB,IAF2B,2CAA/B,uDAIZ4B,EAAe,SAAC3B,GAAD,8CAA+B,WAAOwB,GAAP,SAAAC,EAAA,sEACxChC,EAAwBO,GADgB,OAGjC,IAHiC,OAGhD4B,YACLJ,EAASX,EAAQK,UAAUlB,IAJ0B,2CAA/B,uDAOf6B,EAAY,SAAC3B,GAAD,8CAAgC,WAAOsB,GAAP,eAAAC,EAAA,sEACtChC,EAAqBS,GADiB,OAG/B,KAFpBH,EADmD,QAG9C6B,YACLJ,EAASX,EAAQQ,iBAAiBtB,EAAKA,KAAKuB,SAJO,2CAAhC,uDAOZQ,EAAc,SAACvB,GAAD,8CAAqC,WAAOiB,EAAUO,GAAjB,iBAAAN,EAAA,6DACxD/B,EAASqC,IAAWC,KAAKtC,OAD+B,SAE3CD,EAAuBc,GAFoB,UAItC,KAFlBR,EAFwD,QAIrD6B,WAJqD,oBAK9C,MAAVlC,EALwD,gBAMxD8B,EAASD,EAAe7B,IANgC,6BAQlD,IAAIuC,MAAM,wBARwC,uCAW5DT,EAASU,YAAW,eAAgB,CAACC,OAAQpC,EAAKqC,SAAS,MAXC,kBAYrDC,QAAQC,OAAOvC,EAAKqC,SAAS,KAZwB,4CAArC,yDAgBZG,IAjFQ,WAAkE,IAAjEC,EAAgE,uDAAxDhC,EAAciC,EAA0C,uCAEtF,OAAQA,EAAOzB,MACX,IAAK,sBACD,IAAI0B,EAAU,CACVhC,GAAI,EACJC,QAAS8B,EAAO1B,YAChBH,WAAY,GAEhB,OAAO,2BACA4B,GADP,IAEI/B,MAAM,GAAD,mBAAM+B,EAAM/B,OAAZ,CAAmBiC,MAGhC,IAAK,wBACD,OAAO,2BACAF,GADP,IAEIxC,OAAQyC,EAAOzC,SAGvB,IAAK,8BACD,OAAO,2BAAIwC,GAAX,IAAkBjC,QAASkC,EAAOlC,UAGtC,IAAK,yBACD,OAAO,2BAAIiC,GAAX,IAAkB/B,MAAO+B,EAAM/B,MAAMkC,QAAO,SAAAC,GAAC,OAAIA,EAAElC,KAAO+B,EAAOrB,YAErE,IAAK,gCAED,OAAO,2BAAIoB,GAAX,IAAkBjC,QAAQ,2BAAKiC,EAAMjC,SAAZ,IAAqBe,OAAQmB,EAAOnB,WACjE,QACI,OAAOkB,K,gCC9CjB,0GAUYK,EAKAC,EAfZ,SAEanD,EAFb,OAEwBoD,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACT5C,QAAS,CACL,UAAW,2C,SAIPuC,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,uCCfG,QAA0B,kC,sFCYrCtC,EAAe,CACjB2C,QAAS,CACP,CAAEzC,GAAI,EAAG0C,KAAM,UACf,CAAE1C,GAAI,EAAG0C,KAAM,QACf,CAAE1C,GAAI,EAAG0C,KAAM,UACf,CAAE1C,GAAI,EAAG0C,KAAM,OACf,CAAE1C,GAAI,EAAG0C,KAAM,WACf,CAAE1C,GAAI,EAAG0C,KAAM,UAEjBhB,SAAU,CACR,CAAE1B,GAAI,EAAGC,QAAS,2BAClB,CAAED,GAAI,EAAGC,QAAS,yBAClB,CAAED,GAAI,EAAGC,QAAS,4BAClB,CAAED,GAAI,EAAGC,QAAS,OAClB,CAAED,GAAI,EAAGC,QAAS,WAClB,CAAED,GAAI,EAAGC,QAAS,WAiBTE,EAAU,CACrBwC,YAAa,SAACC,GAAD,MAA6B,CAAEtC,KAAM,0BAA2BsC,oBAGhEC,IAjBQ,WAAkE,IAAjEf,EAAgE,uDAAxDhC,EAAciC,EAA0C,uCACtF,GACO,4BADCA,EAAOzB,KACb,CACE,IAAIwC,EAAOf,EAAOa,eAClB,OAAO,2BACFd,GADL,IAEEJ,SAAS,GAAD,mBAAOI,EAAMJ,UAAb,CAAuB,CAAE1B,GAAI,EAAGC,QAAS6C,OAGnD,OAAOhB,I,oBCvCbjD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,wSCQ/EiE,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,KAAQH,EAAWE,IAAOJ,MAAQ,IAAvE,UACI,8BACKC,IAEHC,GAAY,+BAAOF,QAKpBM,EAAwC,SAACC,GAElD,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAAd,YAAoCS,EAApC,IACA,OAAO,eAACV,EAAD,2BAAiBU,GAAjB,kBAAyB,oDAAcC,GAAUC,SAG/CC,EAAqC,SAACH,GAE/C,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAAd,YAAoCS,EAApC,IACA,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,iDAAWC,GAAWC,QAGlD,SAASE,EAA0CC,EAAiCpB,EAAoBqB,EAAuCC,GAA8D,IAArBP,EAAoB,uDAAZ,GAAIQ,EAAQ,uDAAH,GACxM,OAAO,gCACH,cAAC,IAAD,aAAOH,YAAaA,EACbpB,KAAMA,EACNwB,SAAUH,EACVC,UAAWA,GACPP,IALR,IAMHQ,O,+JCbGE,EAvBU,WACrB,OAAO,sBAAKd,UAAWe,IAAEC,IAAlB,UACD,qBAAKhB,UAAWe,IAAEE,KAAlB,SACE,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,uBAEF,qBAAKpB,UAAS,UAAKe,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACM,cAAC,IAAD,CAASH,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,wBAEJ,qBAAKpB,UAAS,UAAKe,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACI,cAAC,IAAD,CAASH,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,qBAEN,qBAAKpB,UAAWe,IAAEE,KAAlB,SACE,cAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,IAAEK,WAAvC,oBAEF,qBAAKpB,UAAWe,IAAEE,KAAlB,SACE,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,qBAEF,qBAAKpB,UAAWe,IAAEE,KAAlB,SACE,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAEK,WAA3C,4B,+DCpBCE,EAAW,CACpBC,SADoB,WACwE,IAAnFC,EAAkF,uDAApE,EAAGC,EAAiE,uDAAtD,GAAIC,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAL,KACpF,OAAO/F,IAASC,IAAkB,qBAAc2F,EAAd,kBAAmCC,EAAnC,iBAAoDC,IAAoB,MAAVC,EAAiB,GAAjB,kBAAiCA,KAC9H7F,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEvB4F,OALsB,SAKfjG,GACN,OAAOC,IAASiG,KAAT,iBAAyClG,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAE3E8F,SARsB,SAQbnG,GACP,OAAOC,IAASmG,OAAT,iBAA0BpG,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UCXlDgG,EAAsB,SAACC,EAAYC,EAAaC,EAAkBC,GAC7E,OAAOH,EAAMI,KAAI,SAACC,GACd,OAAIA,EAAEH,KAAiBD,EACZ,2BAAII,GAAMF,GAEdE,MCET7F,EAAe,CACf8F,MAAO,GACPd,SAAU,GACVe,gBAAiB,EACjBhB,YAAa,EACbiB,YAAY,EACZC,oBAAqB,GACrB9D,OAAQ,CACJ8C,KAAM,GACNC,OAAQ,OA4CH7E,EACM,SAACnB,GAAD,MAAqB,CAACsB,KAAM,kBAAmBtB,WADrDmB,EAEQ,SAACnB,GAAD,MAAqB,CAACsB,KAAM,oBAAqBtB,WAFzDmB,EAGC,SAACyF,GAAD,MAA6B,CAACtF,KAAM,qBAAsBsF,UAH3DzF,EAIO,SAAC0E,GAAD,MAA0B,CAACvE,KAAM,4BAA6BuE,gBAJrE1E,EAKE,SAAC8B,GAAD,MAAyB,CAAC3B,KAAM,sBAAuB0F,QAAS/D,IALlE9B,EAMW,SAAC0F,GAAD,MAA8B,CAACvF,KAAM,iCAAkC2F,MAAOJ,IANzF1F,EAOS,SAAC2F,GAAD,MAA0B,CAACxF,KAAM,8BAA+BwF,eAPzE3F,EAQgB,SAAC2F,EAAqB9G,GAAtB,MAA0C,CACnEsB,KAAM,wCACNwF,aACA9G,WAiBEkH,EAAmB,uCAAG,WAAOpF,EAC/B9B,EACAmH,EACAC,GAHwB,SAAArF,EAAA,6DAI5BD,EAASX,GAAgC,EAAMnB,IAJnB,SAKPmH,EAAUnH,GALH,OAOC,IAPD,OAOfkC,YACbJ,EAASsF,EAAcpH,IAEvB8B,EAASX,GAAgC,EAAOnB,IAVpB,2CAAH,4DAwBVqH,EA5FM,WAA8D,IAA7DvE,EAA4D,uDAApDhC,EAAciC,EAAsC,uCAC9E,OAAQA,EAAOzB,MACX,IAAK,kBACD,OAAO,2BACAwB,GADP,IAEI8D,MAAOP,EAAoBvD,EAAM8D,MAAO7D,EAAO/C,OAAQ,KAAM,CAACsH,UAAU,MAEhF,IAAK,oBACD,OAAO,2BACAxE,GADP,IAEI8D,MAAOP,EAAoBvD,EAAM8D,MAAO7D,EAAO/C,OAAQ,KAAM,CAACsH,UAAU,MAEhF,IAAK,qBACD,OAAO,2BAAIxE,GAAX,IAAkB8D,MAAO7D,EAAO6D,QAEpC,IAAK,4BACD,OAAO,2BAAI9D,GAAX,IAAkB+C,YAAa9C,EAAO8C,cAE1C,IAAK,iCACD,OAAO,2BAAI/C,GAAX,IAAkB+D,gBAAiB9D,EAAOkE,QAE9C,IAAK,8BACD,OAAO,2BAAInE,GAAX,IAAkBgE,WAAY/D,EAAO+D,aAEzC,IAAK,wCACD,OAAO,2BACAhE,GADP,IAEIiE,oBAAqBhE,EAAO+D,WAAP,sBACXhE,EAAMiE,qBADK,CACgBhE,EAAO/C,SACtC8C,EAAMiE,oBAAoB9D,QAAO,SAAAjC,GAAE,OAAIA,IAAO+B,EAAO/C,YAGnE,IAAK,sBACD,OAAO,2BAAI8C,GAAX,IAAkBG,OAAQF,EAAOiE,UAErC,QACI,OAAOlE,I,4DCRJyE,EApCsB,SAAC,GAKlC,IAL8H,IAA3FC,EAA0F,EAA1FA,gBAAiB1B,EAAyE,EAAzEA,SAAyE,IAA/DD,mBAA+D,MAAjD,EAAiD,MAA9C4B,qBAA8C,MAA9B,SAAAC,GAAC,OAAIA,GAAyB,MAAtBC,mBAAsB,MAAR,GAAQ,EAEzHC,EAAaC,KAAKC,KAAKN,EAAkB1B,GAEzCiC,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAC1C,EAAwCQ,mBAAS,GAAjD,mBAAKC,EAAL,KAAoBC,EAApB,KAEIC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAG7C,OAAO,sBAAKtD,UAAWmE,IAAGlE,IAAOmE,WAA1B,UACDL,EAAgB,GAClB,wBAAQM,QAAS,WAAQL,EAAiBD,EAAgB,IAA1D,kBAEKL,EACI9E,QAAO,SAAAC,GAAC,OAAIA,GAAKoF,GAAyBpF,GAAGqF,KAC7C7B,KAAI,SAACxD,GACN,OAAO,sBAAMmB,UAAYmE,IAAG,eACvBlE,IAAOqE,aAAe9C,IAAgB3C,GACxCoB,IAAOsE,YAEGF,QAAS,SAACG,GACNpB,EAAcvE,IALxB,SAMUA,GAHCA,MAKxBgF,EAAeE,GACb,wBAAQM,QAAS,WAAQL,EAAiBD,EAAgB,IAA1D,sB,2BCGGU,EAlCiB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAA2B5C,GAAsB,EAA3CY,oBAA2C,EAAtBZ,UAAUF,EAAY,EAAZA,OACrE,OACG,gCACS,iCACI,8BACG,cAAC,IAAD,CAASV,GAAI,YAAcwD,EAAK/H,GAAhC,SACC,qBAAKgI,IAAI,WAAWC,IAA0B,MAArBF,EAAKnH,OAAOsH,MAAgBH,EAAKnH,OAAOsH,MAAQC,IACpE9E,UAAWC,IAAO6E,gBAG3B,8BACKJ,EAAKzB,SACA,wBACQoB,QAAS,WAAQvC,EAAS4C,EAAK/H,KADvC,sBAGA,wBACQ0H,QAAS,WAAQzC,EAAO8C,EAAK/H,KADrC,yBAMd,iCACI,iCACI,8BAAM+H,EAAKrF,OACX,8BAAMqF,EAAKzI,YAEf,iCACI,8BAAM,0BACN,8BAAM,iC,QCrCtB8I,EAA0B,SAACC,GAE7B,MADe,IAaNC,EAAuCC,IAAMC,MAAK,SAAC/E,GAY5D,OAAO,8BACH,cAAC,IAAD,CACIgF,cAAe,CAAC1D,KAAM,GAAIC,OAAQ,QAClCd,SAAUkE,EACVM,SAdO,SAACL,EAAD,GAA4F,IAAxEM,EAAuE,EAAvEA,cACzB1G,EAAqB,CACvB8C,KAAMsD,EAAOtD,KACbC,OAA0B,SAAlBqD,EAAOrD,OAAoB,KAAyB,SAAlBqD,EAAOrD,QAGrDvB,EAAMmF,gBAAgB3G,GACtB0G,GAAc,IAId,SAKK,gBAAEE,EAAF,EAAEA,aAAF,OACG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOvI,KAAK,OAAOoC,KAAK,SAExB,eAAC,IAAD,CAAOA,KAAK,SAASoG,GAAG,SAAxB,UACI,wBAAQC,MAAM,OAAd,iBACA,wBAAQA,MAAM,OAAd,2BACA,wBAAQA,MAAM,QAAd,gCAEJ,wBAAQzI,KAAK,SAAS0I,SAAUH,EAAhC,6B,uECJLI,EArBY,SAAC,GACmB,IADlBpE,EACiB,EADjBA,YAAagB,EACI,EADJA,gBAAiBf,EACb,EADaA,SAAU2B,EACvB,EADuBA,cAAeb,EACtC,EADsCA,MACjDnC,EAAW,iBAC1C,OAAO,gCAEH,cAAC6E,EAAD,CAAiBM,gBAAiBnF,EAAMmF,kBACxC,cAAC,EAAD,CAAW/D,YAAaA,EAAa4B,cAAeA,EACzCD,gBAAiBX,EAAiBf,SAAUA,IACvD,8BAEQc,EAAMF,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMoC,KAAMpC,EACNI,oBAAqBtC,EAAMsC,oBAE3BZ,SAAU1B,EAAM0B,SAChBF,OAAQxB,EAAMwB,QAFTU,EAAE3F,a,2BCxB/B4E,GAAWsE,cAJC,SAACpH,GACtB,OAAOA,EAAMqH,UAAUvD,SAG+B,SAACA,GACvD,OAAOA,EAAM3D,QAAO,SAAA0D,GAAC,OAAI,QAGhByD,GAAc,SAACtH,GACxB,OAAOA,EAAMqH,UAAUrE,UAGduE,GAAqB,SAACvH,GAC/B,OAAOA,EAAMqH,UAAUtD,iBAGdyD,GAAiB,SAACxH,GAC3B,OAAOA,EAAMqH,UAAUtE,aAGd0E,GAAgB,SAACzH,GAC1B,OAAOA,EAAMqH,UAAUrD,YAGd0D,GAAyB,SAAC1H,GACnC,OAAOA,EAAMqH,UAAUpD,qBAGd0D,GAAiB,SAAC3H,GAC3B,OAAOA,EAAMqH,UAAUlH,QCArByH,G,4MAMFjD,cAAgB,SAACmB,GACb,MAA2B,EAAKnE,MAAzBqB,EAAP,EAAOA,SAAU7C,EAAjB,EAAiBA,OACjB,EAAKwB,MAAMmB,SAASgD,EAAY9C,EAAU7C,I,EAG9C2G,gBAAkB,SAAC3G,GACf,IAAO6C,EAAY,EAAKrB,MAAjBqB,SACP,EAAKrB,MAAMmB,SAAS,EAAGE,EAAU7C,I,uDAZrC,WACI,MAAwC0H,KAAKlG,MAAtCoB,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,SAAU7C,EAA9B,EAA8BA,OAC9B0H,KAAKlG,MAAMmB,SAASC,EAAaC,EAAU7C,K,oBAa/C,WAEI,OAAO,qCACH,6BAAK0H,KAAKlG,MAAMmG,YACfD,KAAKlG,MAAMqC,WAAa,cAAC+D,GAAA,EAAD,IAAe,KACxC,cAAC,EAAD,CAAOhE,gBAAiB8D,KAAKlG,MAAMoC,gBAC5Bf,SAAU6E,KAAKlG,MAAMqB,SACrBD,YAAa8E,KAAKlG,MAAMoB,YACxB4B,cAAekD,KAAKlD,cACpBmC,gBAAiBe,KAAKf,gBACtBhD,MAAO+D,KAAKlG,MAAMmC,MAClBX,OAAQ0E,KAAKlG,MAAMwB,OACnBE,SAAUwE,KAAKlG,MAAM0B,SACrBY,oBAAqB4D,KAAKlG,MAAMsC,6B,GA7BtBwC,IAAMuB,WAgDpBC,gBAEXC,aAfkB,SAAClI,GACnB,MAAO,CACH8D,MAAOhB,GAAS9C,GAChBgD,SAAUsE,GAAYtH,GACtB+D,gBAAiBwD,GAAmBvH,GACpC+C,YAAayE,GAAexH,GAC5BgE,WAAYyD,GAAczH,GAC1BiE,oBAAqByD,GAAuB1H,GAC5CG,OAAQwH,GAAe3H,MASvB,CAACmD,ONiBa,SAACjG,GACnB,8CAAO,WAAO8B,GAAP,SAAAC,EAAA,sEACEmF,EAAoBpF,EAAU9B,EAAQ2F,EAASM,OAAOgF,KAAKtF,GAAWxE,GADxE,2CAAP,uDMlBagF,SNsBO,SAACnG,GACrB,8CAAO,WAAO8B,GAAP,SAAAC,EAAA,sEACEmF,EAAoBpF,EAAU9B,EAAQ2F,EAASQ,SAAS8E,KAAKtF,GAAWxE,GAD1E,2CAAP,uDMvBuByE,SNTC,SAACsF,EAAcpF,EAAkB7C,GACzD,8CAAO,WAAOnB,EAAUO,GAAjB,eAAAN,EAAA,6DACHD,EAASX,GAAyB,IAClCW,EAASX,EAAuB+J,IAChCpJ,EAASX,EAAkB8B,IAHxB,SAKc0C,EAASC,SAASsF,EAAMpF,EAAU7C,EAAO8C,KAAM9C,EAAO+C,QALpE,OAKC3F,EALD,OAMHyB,EAASX,GAAyB,IAClCW,EAASX,EAAiBd,EAAKiG,QAC/BxE,EAASX,EAA2Bd,EAAK8K,aARtC,2CAAP,2DMIWJ,CAKbL,I,qBCxDaU,GAhB4C,SAAC3G,GAC1D,OAAO,yBAAQJ,UAAWe,KAAEiG,OAArB,UAKH,mBAAGC,KAAK,uDAAuDC,MAAM,8BAArE,SAAmG,qBAAKtC,IAAI,sGAAsGD,IAAI,+CAEtN,qBAAK3E,UAAWe,KAAEoG,WAAlB,SACG/G,EAAMgH,OACH,oCAAOhH,EAAMiH,MAAb,MAAsB,wBAAQhD,QAASjE,EAAMkH,OAAvB,qBAAtB,OACA,cAAC,IAAD,CAASpG,GAAI,SAAb,yBCZCqG,GAAU,WAEjB,OAAO3L,IAASC,IAAT,WAA6DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF7EuL,GAAU,SAIZC,EAAeC,GAA+E,IAA7DC,EAA4D,wDAA/BC,EAA+B,uDAAP,KAC3F,OAAO/L,IAASiG,KAAT,aAAkH,CAAE2F,QAAOC,WAAUC,aAAYC,YACrJ7L,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANZuL,GAAU,WASjB,OAAO3L,IAASmG,OAAT,eCfA6F,GAAc,WAErB,OAAOhM,IAASC,IAAT,4BAAoEC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,S,SCC9FS,GAAe,CACfd,OAAQ,KACR6L,MAAO,KACPH,MAAO,KACPD,QAAQ,EACRS,WAAY,MAgBH/K,GACQ,SAACnB,EAAuB6L,EAAsBH,EAAsBD,GAApE,MAAyF,CACtGnK,KAAM,wBAAyB0F,QAAS,CAAChH,SAAQ6L,QAAOH,QAAOD,YAF1DtK,GAIa,SAAC+K,GAAD,MAAyB,CAC3C5K,KAAM,kCAAmC0F,QAAS,CAACkF,gBAI9CC,GAAkB,yDAAiB,WAAOrK,GAAP,uBAAAC,EAAA,sEACzB6J,KADyB,QACxCQ,EADwC,QAGjClK,aAAeiB,IAAgBkJ,UAAU,EACvBD,EAAO/L,KAA3BW,EAD0C,EAC1CA,GAAI0K,EADsC,EACtCA,MAAOG,EAD+B,EAC/BA,MAChB/J,EAASX,GAAwBH,EAAI6K,EAAOH,GAAO,KALX,2CAAjB,uDAwBlBY,GAAgB,yDAAqB,WAAOxK,GAAP,iBAAAC,EAAA,sEAC3BkK,KAD2B,OACxC5L,EADwC,OAExC6L,EAAa7L,EAAKkM,IACxBzK,EAASX,GAA6B+K,IAHQ,2CAArB,uDAcdM,GA5DK,WAAkE,IAAjE1J,EAAgE,uDAAxDhC,GAAciC,EAA0C,uCACjF,OAAQA,EAAOzB,MACX,IAAK,wBACL,IAAK,kCACD,OAAO,2BACAwB,GACAC,EAAOiE,SAElB,QACI,OAAOlE,ICpBb2J,G,4JAEJ,WACA,OAAO,cAAC,GAAD,eAAa9B,KAAKlG,Y,GAHG8E,IAAMuB,WAarBE,gBANS,SAAClI,GAAD,MAA0B,CAChD2I,OAAQ3I,EAAMR,KAAKmJ,OACnBC,MAAO5I,EAAMR,KAAKoJ,MAClBC,OAAQ,gBAGiF,CAACA,ODkDtE,yDAAiB,WAAO7J,GAAP,SAAAC,EAAA,sEACd6J,KADc,OAGF,IAHE,OAGtBvL,KAAK6B,YACdJ,EAASX,GAAwB,KAAM,KAAM,MAAM,IAJpB,2CAAjB,wDClDP6J,CAAsFyB,I,gDCe/FC,GAAiBC,aAAkD,CAACC,KAAM,SAAzDD,EApBoF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc3I,EAAuB,EAAvBA,MAAOgI,EAAgB,EAAhBA,WAC9H,OACI,uBAAMxC,SAAUmD,EAAhB,UACKhI,aAAoC,QAAS,QAAS,CAACiI,MAAWlI,MAClEC,aAAoC,WAAY,WAAY,CAACiI,MAAWlI,KAAO,CAACtD,KAAM,aACtFuD,kBAAoCkI,EAAW,aAAc,GAAInI,KAAO,CAACtD,KAAM,YAAa,eAE3F4K,GAAc,qBAAKlD,IAAI,GAAGC,IAAKiD,IAC/BA,GAAcrH,aAAoC,mBAAoB,UAAW,CAACiI,MAAWlI,KAAO,IAErGV,GAAS,qBAAKG,UAAW2I,KAAMC,iBAAtB,SACL/I,IAEL,8BACI,mDA6CD8G,gBAJS,SAAClI,GAAD,MAA6C,CACjEoJ,WAAYpJ,EAAMR,KAAK4J,WACvBT,OAAQ3I,EAAMR,KAAKmJ,UAEkB,CAACC,MFzBrB,SAACG,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAmF,WAAOlK,GAAP,iBAAAC,EAAA,sEACnF6J,GAAcC,EAAOC,EAAUC,EAAYC,GADwC,QAChG3L,EADgG,QAE3F6B,aAAeiB,IAAgBkJ,QAEpCvK,EAASqK,OAEL9L,EAAK6B,aAAekB,IAA0B8J,mBAC9CpL,EAASwK,MAGTrL,EAAUZ,EAAKqC,SAASyK,OAAS,EAAI9M,EAAKqC,SAAS,GAAK,aAC5DZ,EAASU,aAAW,QAAS,CAACC,OAAQxB,MAX0D,2CAAnF,wDEyBN+J,EAnBmD,SAACvG,GAK/D,OAAIA,EAAMgH,OACC,cAAC,IAAD,CAAUlG,GAAI,aAGlB,gCACH,uCACA,cAACmH,GAAD,CAAgBhD,SAVH,SAACjJ,GACdgE,EAAMiH,MAAMjL,EAASoL,MAAOpL,EAASqL,SAAUrL,EAASsL,WAAYtL,EAASuL,UASzCE,WAAYzH,EAAMyH,mBC3D1DpL,GAAe,CACfsM,aAAa,GAgBJjM,GACW,iBAAO,CAACG,KAAM,+BAavB+L,GA3BI,WAAkE,IAAjEvK,EAAgE,uDAAxDhC,GAAciC,EAA0C,uCAChF,MACS,+BADDA,EAAOzB,KAEA,2BACAwB,GADP,IAEIsK,aAAa,IAIVtK,G,oBCnBfhC,GAAe,GAQJwM,GAJQ,WAA0D,IAAzDxK,EAAwD,uDAAhDhC,GAC5B,OAAOgC,G,oBCKPyK,GAAcC,aAAgB,CAC9BC,YAAa5K,KACb6K,YAAa7J,KACb8J,QAASL,GACTnD,UAAW9C,EACX/E,KAAMkK,GACNI,KAAMgB,KACNC,IAAKR,KAWHS,GAAmBC,OAAOC,sCAAwCjD,KAClEkD,GAAQC,aAAYX,GAAcO,GAAiBK,aAAgBC,QAEzEL,OAAOM,UAAYJ,GAEJA,UC7BR,SAASK,GAAkBC,GAC9B,OAAO,SAAC9J,GACJ,OAAO,cAAC,IAAM+J,SAAP,CAAgBC,SAAU,cAAC5D,GAAA,EAAD,IAA1B,SACH,cAAC0D,EAAD,eAAsB9J,OCOlC,IAAMiK,GAAmBnF,IAAMoF,MAAK,kBAAM,iCACpCC,GAAmBrF,IAAMoF,MAAK,kBAAM,iCAOpCE,GAAmBP,GAAaI,IAChCI,GAAmBR,GAAaM,IAEhCG,G,4MACJC,wBAA0B,SAACnG,GACzBoG,MAAM,wB,uDAGV,WACItE,KAAKlG,MAAMyK,gBACXnB,OAAOoB,iBAAiB,qBAAsBxE,KAAKqE,2B,kCAEvD,WACIjB,OAAOqB,oBAAoB,qBAAsBzE,KAAKqE,2B,oBAGxD,WACE,OAAKrE,KAAKlG,MAAM2I,YAKhB,sBAAK/I,UAAU,cAAf,UACI,cAAC,GAAD,IACA,cAAC,EAAD,IACE,qBAAKA,UAAU,sBAAf,SACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOgL,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAUhK,GAAI,gBAClD,cAAC,IAAD,CAAO+J,KAAK,WAAWC,OAAQ,kBAAM,cAACV,GAAD,OACrC,cAAC,IAAD,CAAOS,KAAK,oBAAoBC,OAAQ,kBAAM,cAACT,GAAD,OAC9C,cAAC,IAAD,CAAOQ,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,CAAgB3E,UAAW,cAC9D,cAAC,IAAD,CAAO0E,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,2DAd7B,cAAC1E,GAAA,EAAD,Q,GAfGC,aAwCd0E,GAAezE,aACjB0E,IACAzE,aANsB,SAAClI,GAAD,MAA0B,CAChDsK,YAAatK,EAAM+K,IAAIT,eAKE,CAAC8B,cJxCC,kBAAM,SAACpN,GAChC,IAAI4N,EAAU5N,EAASqK,MAEvBxJ,QAAQgN,IAAI,CAACD,IACRvP,MAAK,WACF2B,EAASX,aIiCF4J,CAE0BgE,IAU9Ba,GARS,WACvB,OAAO,cAAC,IAAD,UACF,cAAC,IAAD,CAAU3B,MAAOA,GAAjB,SACI,cAACuB,GAAD,SCnEVK,IAASN,OAAO,cAAC,GAAD,IAAUO,SAASC,eAAe,U,gCCLlD,kBAUelF,IAJsB,SAACpG,GAClC,OAAO,qBAAKJ,UAAU,oB,mBCN1BxE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,gCCC3H,oEAAO,IAAMgN,EAA+B,SAAC/C,GACzC,IAAIA,EACJ,MAAO,qBAGEiG,EAAmB,SAACC,GAAD,OAA2C,SAAClG,GACxE,GAAIA,EAAMoD,OAAS8C,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCPlCpQ,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,mC","file":"static/js/main.3c0893ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}","import { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { PostType, ProfileType, PhotosType } from './../types/types';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { profileAPI } from '../api/profile-api';\n\nlet initialState = {\n  posts: [\n    { id: 1, message: \"hi, how are you?\", likesCount: 12 },\n    { id: 2, message: \"this is a post?\", likesCount: 23 },\n    { id: 3, message: \"viva latina?\", likesCount: 3 },\n  ] as Array<PostType>,\n  profile: null as ProfileType | null,\n  status: \"\",\n};\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n      case 'SN/PROFILE/ADD-POST': {\n          let newPost = {\n              id: 5,\n              message: action.newPostText,\n              likesCount: 0\n          };\n          return {\n              ...state,\n              posts: [...state.posts, newPost],\n          };\n      }\n      case 'SN/PROFILE/SET_STATUS': {\n          return {\n              ...state,\n              status: action.status\n          }\n      }\n      case 'SN/PROFILE/SET_USER_PROFILE': {\n          return {...state, profile: action.profile}\n      }\n\n      case 'SN/PROFILE/DELETE_POST':\n          return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\n\n      case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n          debugger;\n          return {...state, profile: {...state.profile, photos: action.photos } as ProfileType}\n      default:\n          return state;\n  }\n}\n\nexport const actions = {\n  addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n  setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n  setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n  deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n  savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(actions.setUserProfile(data));\n}\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n  let data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n}\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n  let data = await profileAPI.updateStatus(status);\n\n  if (data.resultCode === 0) {\n      dispatch(actions.setStatus(status));\n  }\n}\nexport const savePhoto = (photoFile: File): ThunkType => async (dispatch) => {\n  let data = await profileAPI.savePhoto(photoFile);\n\n  if (data.resultCode === 0) {\n      dispatch(actions.savePhotoSuccess(data.data.photos));\n  }\n}\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState: any) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    if (userId != null) {\n        dispatch(getUserProfile(userId))\n    } else {\n        throw new Error(\"userId can't be null\")\n    }\n} else {\n    dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n    return Promise.reject(data.messages[0])\n}\n}\n\nexport default profileReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import axios from \"axios\";\nimport { UserType } from \"../types/types\";\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"89e2f250-2505-4a1c-a90b-397e41b71ddc\",\n      }\n})\n\nexport enum ResultCodesEnum {\n  Success = 0, \n  Error = 1,\n}\n\nexport enum ResultCodesForCaptchaEnum {\n  CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string | null \n}\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n  data: D\n  messages: Array<string>\n  resultCode: RC\n}","export default __webpack_public_path__ + \"static/media/zoom.4bb0722e.jpg\";","import { InferActionsTypes } from './redux-store';\n\ntype DialogType = {\n  id: number,\n  name: string\n}\n\ntype MessageType = {\n  id: number,\n  message: string\n}\n\nlet initialState = {\n  dialogs: [\n    { id: 1, name: \"Dallas\" },\n    { id: 2, name: \"Jack\" },\n    { id: 3, name: \"Joseph\" },\n    { id: 4, name: \"Eva\" },\n    { id: 5, name: \"Siberia\" },\n    { id: 6, name: \"Tokio\" },\n  ] as Array<DialogType>,\n  messages: [\n    { id: 1, message: \"Tokio is calling Berlin\" },\n    { id: 2, message: \"Tokio is calling Dock\" },\n    { id: 3, message: \"Tokio is calling Albania\" },\n    { id: 4, message: \"Eva\" },\n    { id: 5, message: \"Siberia\" },\n    { id: 6, message: \"Tokio\" },\n  ] as Array<MessageType>\n};\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'SN/DIALOGS/SEND-MESSAGE':\n      let body = action.newMessageBody;\n      return {\n        ...state,\n        messages: [ ...state.messages, { id: 6, message: body }],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  sendMessage: (newMessageBody: string) => ({ type: 'SN/DIALOGS/SEND-MESSAGE', newMessageBody } as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"activeLink\":\"Navbar_activeLink__3etBE\"};","import { FieldValidatorType } from '../../../utils/validators/validators';\nimport React from \"react\";\nimport styles from \"./FormsControls.module.css\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + ( hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            { hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}> <textarea {...input}{...restProps}/></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport function createField<FormKeysType extends string> (placeholder: string | undefined, name: FormKeysType, validators: Array<FieldValidatorType>, component: React.FC<WrappedFieldProps> , props = {}, text=\"\"){\n        return <div>\n            <Field placeholder={placeholder} \n                   name={name}\n                   validate={validators}\n                   component={component}\n                   {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string> ","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css'\n\nconst Navbar: React.FC = () => {\n    return <nav className={s.nav}>\n          <div className={s.item}>\n            <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n          </div>\n          <div className={`${s.item} ${s.active}`}>\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={`${s.item} ${s.active}`}>\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n          <div className={s.item}>\n            <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n          </div>\n          <div className={s.item}>\n            <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n          </div>\n          <div className={s.item}>\n            <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n          </div>\n  </nav>\n}\n\nexport default Navbar;","import { GetItemsType, instance, APIResponseType } from \"./api\";\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend:  null | boolean = null){\n      return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend == null ? '' : `&friend=${friend}`))\n        .then(res => res.data);\n},\n  follow(userId: number) {\n   return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n  },\n  unfollow(userId: number) {\n    return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n  }\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n  return items.map((u: any) => {\n      if (u[objPropName] === itemId) {\n          return {...u, ...newObjProps}\n      }\n      return u;\n  })\n}","import { UserType } from './../types/types';\nimport { usersAPI } from '../api/users-api';\nimport { updateObjectInArray } from \"../utils/validators/object-helpers\";\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { Dispatch } from 'react';\nimport { APIResponseType } from '../api/api';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 12,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of user numbers\n    filter: {\n        term: '',\n        friend: null as null | boolean \n    }\n};\n\nconst usersReducer = (state = initialState, action: ActionsType): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true} )\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false} )\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n    type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n    isFetching,\n    userId\n} as const)\n}\n\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true));\n        dispatch(actions.setCurrentPage(page));\n        dispatch(actions.setFilter(filter));\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\n    userId: number,\n    apiMethod: (userId: number) => Promise<APIResponseType>,\n    actionCreator: (userId: number) => ActionsType) => {\ndispatch(actions.toggleFollowingProgress(true, userId))\nlet response = await apiMethod(userId)\n\nif (response.resultCode ===  0) {\ndispatch(actionCreator(userId))\n}\ndispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType  => {\n    return async (dispatch) => {\n       await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n    }\n}\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n       await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n    }\n}\n\nexport default usersReducer;\n\ntype ThunkType = BaseThunkType<ActionsType>\nexport type FilterType = typeof initialState.filter\ntype ActionsType = InferActionsTypes<typeof actions>\nexport type InitialState = typeof initialState;","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from \"classnames\"\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n    </div>\n}\n\nexport default Paginator;","import React from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/zoom.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserType } from \"../../types/types\";\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n  return (\n     <div>\n              <span>\n                  <div>\n                     <NavLink to={'/profile/' + user.id}>\n                      <img alt=\"usr face\" src={user.photos.small != null ? user.photos.small : userPhoto}\n                           className={styles.userPhoto}/>\n                     </NavLink>\n                  </div>\n                  <div>\n                      {user.followed\n                          ? <button \n                                    onClick={() => { unfollow(user.id) }}>\n                              Unfollow</button>\n                          : <button \n                                    onClick={() => { follow(user.id) }}>\n                                    Follow</button>}\n\n                  </div>\n              </span>\n              <span>\n                  <span>\n                      <div>{user.name}</div>\n                      <div>{user.status}</div>\n                  </span>\n                  <span>\n                      <div>{\"user.location.country\"}</div>\n                      <div>{\"user.location.city\"}</div>\n                  </span>\n              </span>\n          </div>)\n}\n\nexport default User;","import { Field, Form, Formik } from \"formik\"\nimport React from \"react\"\nimport { FilterType } from \"../../redux/users-reducer\"\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            initialValues={{term: '', friend: 'null'}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})","import React, {FC} from 'react';\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\nimport {UserType} from '../../types/types';\nimport {UsersSearchForm} from './UsersSearchForm';\nimport { FilterType } from '../../redux/users-reducer';\n\ntype PropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    onFilterChanged: (filter: FilterType) => void\n    users: Array<UserType>\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\n\nlet Users: FC<PropsType> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users,\n                                ...props}) => {\n    return <div>\n\n        <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={props.followingInProgress}\n                                     key={u.id}\n                                     unfollow={props.unfollow}\n                                     follow={props.follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n\nexport default Users;","import { createSelector } from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector( getUsersSelector, (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport { follow, unfollow, requestUsers, FilterType} from '../../redux/users-reducer';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\nimport { compose } from 'redux';\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalUsersCount, getUsers, getUsersFilter } from '../../redux/users-selectors';\nimport { UserType } from '../../types/types';\nimport { AppStateType } from '../../redux/redux-store';\n\ntype MapStatePropsType = {\n    currentPage: number\n    pageSize: number\n    isFetching: boolean\n    totalUsersCount: number\n    users: Array<UserType>\n    followingInProgress: Array<number>\n    filter: FilterType\n}\n\ntype MapDispatchPropsType = {\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\ntype OwnPropsType = {\n    pageTitle: string\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        const {currentPage, pageSize, filter} = this.props;\n        this.props.getUsers(currentPage, pageSize, filter);\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        const {pageSize, filter} = this.props;\n        this.props.getUsers(pageNumber, pageSize, filter);\n    }\n\n    onFilterChanged = (filter: FilterType) => {\n        const {pageSize} = this.props;\n        this.props.getUsers(1, pageSize, filter);\n    }\n\n    render() {\n\n        return <>\n            <h2>{this.props.pageTitle}</h2>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   onFilterChanged={this.onFilterChanged}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n        filter: getUsersFilter(state)\n    }\n}\n\n\nexport default compose(\n    // TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\n        mapStateToProps,\n        {follow, unfollow, getUsers: requestUsers})\n)(UsersContainer)","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Header.module.css\";\n\nexport type MapPropstype = {\n  isAuth: boolean\n  login: string | null\n}\n\nexport type DispatchPropsType = {\n  logout: () => void\n}\n\nconst Header: React.FC<MapPropstype & DispatchPropsType> = (props) => {\n  return <header className={s.header}>\n      {/* <img\n        src=\"https://i.pinimg.com/originals/3f/3d/d9/3f3dd9219f7bb1c9617cf4f154b70383.jpg\"\n        alt=\"\"\n      /> */}\n      <a href=\"https://www.freepnglogos.com/pics/company-logo-ideas\" title=\"Image from freepnglogos.com\"><img src=\"https://www.freepnglogos.com/uploads/company-logo-png/raise-company-logo-digital-product-demo-9.png\" alt=\"Raise company logo, digital product demo\" /></a>\n\n      <div className={s.loginBlock}>\n        {props.isAuth \n          ? <div> {props.login} - <button onClick={props.logout}>Log out</button> </div>\n          : <NavLink to={\"/login\"}>Login</NavLink>}\n      </div>\n    </header>\n};\n\nexport default Header;\n","import { instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptchaEnum } from \"./api\";\n  \ntype MeResponseDataType = {\n  id: number\n  email: string\n  login: string\n}\n  \n  type LoginResponseDataType = {\n    userId: number\n  }\n\nexport const authAPI = {\n    me() {\n      return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login( email: string, password: string, rememberMe: boolean = false, captcha: null | string =null ) {\n      return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptchaEnum >>(`auth/login`, { email, password, rememberMe, captcha})\n        .then(res => res.data)\n    },\n    logout() {\n      return instance.delete(`auth/login`)\n    },\n  }","import { instance } from \"./api\";\n\ntype GetCaptchaUrlResponseType = {\n  url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n      return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then( res => res.data)\n    }\n  }","import { BaseThunkType } from './redux-store';\nimport { authAPI } from './../api/auth-api';\nimport { securityAPI } from './../api/security-api';\nimport { ResultCodesForCaptchaEnum } from './../api/api';\nimport { ResultCodesEnum } from \"../api/api\";\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { InferActionsTypes } from './redux-store';\n\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const),\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodesForCaptchaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): BaseThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl();\n    const captchaUrl = data.url;\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import React from \"react\";\nimport Header, { MapPropstype, DispatchPropsType } from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../redux/auth-reducer\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\nclass HeaderContainer extends React.Component<MapPropstype & DispatchPropsType> {\n\n  render () {\n  return <Header { ...this.props}/>;\n  };\n};\n\nconst mapStateToProps = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login,\n  logout: () => {}\n});\n\nexport default connect<MapPropstype, DispatchPropsType, {}, AppStateType>(mapStateToProps, {logout})(HeaderContainer);\n","import React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { required } from \"../../utils/validators/validators\";\nimport { createField, GetStringKeys, Input } from \"../common/FormsControls/FormsControls\";\nimport { connect } from \"react-redux\"; \nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport style from \"../common/FormsControls/FormsControls.module.css\"\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit }>\n            {createField<LoginFormValueTypeKeys>(\"Email\", \"email\", [required], Input)}\n            {createField<LoginFormValueTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField<LoginFormValueTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\n\n            { captchaUrl && <img alt='' src={captchaUrl}/>}\n            { captchaUrl && createField<LoginFormValueTypeKeys>(\"anti bot captcha\", \"captcha\", [required], Input, {})}\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\ntype MapStatePropsType = {\n    captchaUrl: string | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: any) => void\n}\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\n\ntype LoginFormValueTypeKeys = GetStringKeys<LoginFormValuesType>\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    const onSubmit = (formData: LoginFormValuesType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n    \n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"} />\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n    </div>\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth\n})\nexport default connect( mapStateToProps, {login})(Login);","import { InferActionsTypes } from './redux-store';\nimport {getAuthUserData} from \"./auth-reducer\";\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nlet initialState = {\n    initialized: false,\n};\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;","let initialState = {};\n\ntype InitialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\n    return state;\n}\n\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer; //( globalstate: GlobalSTATE) =>  GlobalSTATE\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store","import React from \"react\";\nimport Preloader from \"../components/common/Preloader/Preloader\";\n\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<Preloader />} >\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    };\n} ","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Route, withRouter, Switch, Redirect} from \"react-router-dom\";\nimport UsersContainer from './components/Users/UsersContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { connect, Provider } from \"react-redux\";\nimport {compose} from \"redux\"\nimport { initializeApp } from './redux/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { AppStateType } from \"./redux/redux-store\";\nimport { withSuspense } from './hoc/withSuspense';\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occurred\");\n    //console.error(promiseRejectionEvent);\n}\ncomponentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n}\ncomponentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n}\n\n  render () {  \n    if (!this.props.initialized){\n        return <Preloader/>\n    }\n\n    return (\n    <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n          <div className='app-wrapper-content'>\n          <Switch>\n              <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\n              <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\n              <Route path='/profile/:userId?' render={() => <SuspendedProfile/>} />\n              <Route path='/users' render={() => <UsersContainer pageTitle={\"Sakura\"}/>} />\n              <Route path='/login' render={() => <Login />} />\n              <Route path='*' render={() => <div>404 not found</div>} />\n          </Switch>\n          </div>\n  </div>\n  );}\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n}) \n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, {initializeApp}))(App);\n\nconst JSApp: React.FC = () => {\n return <BrowserRouter >\n      <Provider store={store}>\n          <AppContainer />\n      </Provider>\n  </BrowserRouter>\n}\n\nexport default JSApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JSApp from \"./App\";\n\nReactDOM.render(<JSApp/>, document.getElementById('root'));\n","import  './Preloader.css';\n\ntype PropsType ={\n\n}\n\nlet Preloader: React.FC<PropsType> = (props) => {\n    return <div className=\"lds-hourglass\"></div>\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\",\"selectedPage\":\"Paginator_selectedPage__3SIki\"};"],"sourceRoot":""}