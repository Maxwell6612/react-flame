{"version":3,"sources":["utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/zoom.jpg","api/api.ts","components/Users/users.module.css","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","utils/validators/object-helpers.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ResultCodesEnum","ResultCodesForCaptchaEnum","axios","create","withCredentials","baseURL","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","undefined","alt","src","className","style","formSummaryError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","initialized","appReducer","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","Preloader","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","e","User","user","small","userPhoto","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","disabled","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","JSApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.9c70ce5a.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\",\"selectedPage\":\"Paginator_selectedPage__3SIki\"};","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}","import { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { PostType, ProfileType, PhotosType } from './../types/types';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { profileAPI } from '../api/profile-api';\n\nlet initialState = {\n  posts: [\n    { id: 1, message: \"hi, how are you?\", likesCount: 12 },\n    { id: 2, message: \"this is a post?\", likesCount: 23 },\n    { id: 3, message: \"viva latina?\", likesCount: 3 },\n  ] as Array<PostType>,\n  profile: null as ProfileType | null,\n  status: \"\",\n};\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n      case 'SN/PROFILE/ADD-POST': {\n          let newPost = {\n              id: 5,\n              message: action.newPostText,\n              likesCount: 0\n          };\n          return {\n              ...state,\n              posts: [...state.posts, newPost],\n          };\n      }\n      case 'SN/PROFILE/SET_STATUS': {\n          return {\n              ...state,\n              status: action.status\n          }\n      }\n      case 'SN/PROFILE/SET_USER_PROFILE': {\n          return {...state, profile: action.profile}\n      }\n\n      case 'SN/PROFILE/DELETE_POST':\n          return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\n\n      case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n          debugger;\n          return {...state, profile: {...state.profile, photos: action.photos } as ProfileType}\n      default:\n          return state;\n  }\n}\n\nexport const actions = {\n  addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n  setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n  setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n  deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n  savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(actions.setUserProfile(data));\n}\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n  let data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n}\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n  let data = await profileAPI.updateStatus(status);\n\n  if (data.resultCode === 0) {\n      dispatch(actions.setStatus(status));\n  }\n}\nexport const savePhoto = (photoFile: File): ThunkType => async (dispatch) => {\n  let data = await profileAPI.savePhoto(photoFile);\n\n  if (data.resultCode === 0) {\n      dispatch(actions.savePhotoSuccess(data.data.photos));\n  }\n}\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState: any) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    if (userId != null) {\n        dispatch(getUserProfile(userId))\n    } else {\n        throw new Error(\"userId can't be null\")\n    }\n} else {\n    dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n    return Promise.reject(data.messages[0])\n}\n}\n\nexport default profileReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { InferActionsTypes } from './redux-store';\n\ntype DialogType = {\n  id: number,\n  name: string\n}\n\ntype MessageType = {\n  id: number,\n  message: string\n}\n\nlet initialState = {\n  dialogs: [\n    { id: 1, name: \"Dallas\" },\n    { id: 2, name: \"Jack\" },\n    { id: 3, name: \"Joseph\" },\n    { id: 4, name: \"Eva\" },\n    { id: 5, name: \"Siberia\" },\n    { id: 6, name: \"Tokio\" },\n  ] as Array<DialogType>,\n  messages: [\n    { id: 1, message: \"Tokio is calling Berlin\" },\n    { id: 2, message: \"Tokio is calling Dock\" },\n    { id: 3, message: \"Tokio is calling Albania\" },\n    { id: 4, message: \"Eva\" },\n    { id: 5, message: \"Siberia\" },\n    { id: 6, message: \"Tokio\" },\n  ] as Array<MessageType>\n};\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'SN/DIALOGS/SEND-MESSAGE':\n      let body = action.newMessageBody;\n      return {\n        ...state,\n        messages: [ ...state.messages, { id: 6, message: body }],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  sendMessage: (newMessageBody: string) => ({ type: 'SN/DIALOGS/SEND-MESSAGE', newMessageBody } as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>","export default __webpack_public_path__ + \"static/media/zoom.4bb0722e.jpg\";","import axios from \"axios\";\nimport { UserType } from \"../types/types\";\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"89e2f250-2505-4a1c-a90b-397e41b71ddc\",\n      }\n})\n\nexport enum ResultCodesEnum {\n  Success = 0, \n  Error = 1,\n}\n\nexport enum ResultCodesForCaptchaEnum {\n  CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string | null \n}\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n  data: D\n  messages: Array<string>\n  resultCode: RC\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","import { instance, APIResponseType, ResultCodesEnum, ResultCodesForCaptchaEnum } from \"./api\";\n  \ntype MeResponseDataType = {\n  id: number\n  email: string\n  login: string\n}\n  \n  type LoginResponseDataType = {\n    userId: number\n  }\n\nexport const authAPI = {\n    me() {\n      return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login( email: string, password: string, rememberMe: boolean = false, captcha: null | string =null ) {\n      return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesForCaptchaEnum >>(`auth/login`, { email, password, rememberMe, captcha})\n        .then(res => res.data)\n    },\n    logout() {\n      return instance.delete(`auth/login`)\n    },\n  }","import { instance } from \"./api\";\n\ntype GetCaptchaUrlResponseType = {\n  url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n      return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then( res => res.data)\n    }\n  }","import { BaseThunkType } from './redux-store';\nimport { authAPI } from './../api/auth-api';\nimport { securityAPI } from './../api/security-api';\nimport { ResultCodesForCaptchaEnum } from './../api/api';\nimport { ResultCodesEnum } from \"../api/api\";\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { InferActionsTypes } from './redux-store';\n\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const),\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodesForCaptchaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): BaseThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl();\n    const captchaUrl = data.url;\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { required } from \"../../utils/validators/validators\";\nimport { createField, GetStringKeys, Input } from \"../common/FormsControls/FormsControls\";\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport style from \"../common/FormsControls/FormsControls.module.css\"\nimport { AppStateType } from \"../../redux/redux-store\";\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit }>\n            {createField<LoginFormValueTypeKeys>(\"Email\", \"email\", [required], Input)}\n            {createField<LoginFormValueTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField<LoginFormValueTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\n\n            { captchaUrl && <img alt='' src={captchaUrl}/>}\n            { captchaUrl && createField<LoginFormValueTypeKeys>(\"anti bot captcha\", \"captcha\", [required], Input, {})}\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\n\ntype LoginFormValueTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    \n    if (isAuth) {\n        return <Redirect to={\"/profile\"} />\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}","import { InferActionsTypes } from './redux-store';\nimport {getAuthUserData} from \"./auth-reducer\";\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nlet initialState = {\n    initialized: false,\n};\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;","let initialState = {};\n\ntype InitialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\n    return state;\n}\n\nexport default sidebarReducer;","import { GetItemsType, instance, APIResponseType } from \"./api\";\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend:  null | boolean = null){\n      return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend == null ? '' : `&friend=${friend}`))\n        .then(res => res.data);\n},\n  follow(userId: number) {\n   return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n  },\n  unfollow(userId: number) {\n    return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n  }\n}","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n  return items.map((u: any) => {\n      if (u[objPropName] === itemId) {\n          return {...u, ...newObjProps}\n      }\n      return u;\n  })\n}","import { UserType } from './../types/types';\nimport { usersAPI } from '../api/users-api';\nimport { updateObjectInArray } from \"../utils/validators/object-helpers\";\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { Dispatch } from 'react';\nimport { APIResponseType } from '../api/api';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 12,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of user numbers\n    filter: {\n        term: '',\n        friend: null as null | boolean \n    }\n};\n\nconst usersReducer = (state = initialState, action: ActionsType): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true} )\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false} )\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n    type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n    isFetching,\n    userId\n} as const)\n}\n\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true));\n        dispatch(actions.setCurrentPage(page));\n        dispatch(actions.setFilter(filter));\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType>,\n    userId: number,\n    apiMethod: (userId: number) => Promise<APIResponseType>,\n    actionCreator: (userId: number) => ActionsType) => {\ndispatch(actions.toggleFollowingProgress(true, userId))\nlet response = await apiMethod(userId)\n\nif (response.resultCode ===  0) {\ndispatch(actionCreator(userId))\n}\ndispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType  => {\n    return async (dispatch) => {\n       await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n    }\n}\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n       await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n    }\n}\n\nexport default usersReducer;\n\ntype ThunkType = BaseThunkType<ActionsType>\nexport type FilterType = typeof initialState.filter\ntype ActionsType = InferActionsTypes<typeof actions>\nexport type InitialState = typeof initialState;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer; //( globalstate: GlobalSTATE) =>  GlobalSTATE\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store","import React from \"react\";\nimport Preloader from \"../components/common/Preloader/Preloader\";\n\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<Preloader />} >\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    };\n} ","import { createSelector } from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector( getUsersSelector, (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from \"classnames\"\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n    </div>\n}\n\nexport default Paginator;","import React from \"react\";\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/zoom.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { UserType } from \"../../types/types\";\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n  return (\n     <div>\n              <span>\n                  <div>\n                     <NavLink to={'/profile/' + user.id}>\n                      <img alt=\"usr face\" src={user.photos.small != null ? user.photos.small : userPhoto}\n                           className={styles.userPhoto}/>\n                     </NavLink>\n                  </div>\n                  <div>\n                      {user.followed\n                          ? <button \n                                    onClick={() => { unfollow(user.id) }}>\n                              Unfollow</button>\n                          : <button \n                                    onClick={() => { follow(user.id) }}>\n                                    Follow</button>}\n\n                  </div>\n              </span>\n              <span>\n                  <span>\n                      <div>{user.name}</div>\n                      <div>{user.status}</div>\n                  </span>\n                  <span>\n                      <div>{\"user.location.country\"}</div>\n                      <div>{\"user.location.city\"}</div>\n                  </span>\n              </span>\n          </div>)\n}\n\nexport default User;","import { Field, Form, Formik } from \"formik\"\nimport React from \"react\"\nimport { FilterType } from \"../../redux/users-reducer\"\nimport { getUsersFilter } from \"../../redux/users-selectors\"\nimport { useSelector } from 'react-redux';\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: FriendFormType\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})","import React, {FC, useEffect} from 'react';\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\nimport {UsersSearchForm} from './UsersSearchForm';\nimport { FilterType, requestUsers } from '../../redux/users-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsers, getUsersFilter } from '../../redux/users-selectors';\nimport { useHistory } from 'react-router';\nimport * as queryString from 'querystring';\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const follow = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollow}\n                                     follow={follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport Preloader from '../common/Preloader/Preloader';\nimport { getIsFetching } from '../../redux/users-selectors';\nimport { Users } from './Users';\n\ntype UsersPageType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPageType> = (props) => {\n    \n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n            <h2>{props.pageTitle}</h2>\n            {isFetching ? <Preloader/> : null}\n            <Users/>\n        </>\n}","import { AppStateType } from \"./redux-store\";\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}","import { Avatar, Button, Col, Layout, Menu, Row } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCurrentUserLogin, selectIsAuth } from \"../../redux/auth-selectors\";\nimport { logout } from \"../../redux/auth-reducer\";\n\nexport type MapPropstype = {\n}\n\nexport const Header: React.FC<MapPropstype> = (props) => {\n\n  const isAuth = useSelector(selectIsAuth)\n  const login = useSelector(selectCurrentUserLogin)\n  const dispatch = useDispatch()\n\n  const logoutCallback = () => {\n    dispatch(logout())\n  }\n\n  const { Header } = Layout;\n  \n  return <Header className=\"header\">\n  <Row>\n      <Col span={18}>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n              <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n          </Menu>\n      </Col>\n\n      {isAuth\n          ?<> <Col span={1}>\n              <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n          </Col>\n              <Col span={5}>\n                  <Button onClick={logoutCallback}>Log out</Button>\n              </Col>\n          </>\n          : <Col span={6}>\n              <Button>\n                  <Link to={'/login'}>Login</Link>\n              </Button>\n          </Col>}\n\n  </Row>\n        </Header>\n          \n    // <header className={s.header}>\n    //   {/* <img\n    //     src=\"https://i.pinimg.com/originals/3f/3d/d9/3f3dd9219f7bb1c9617cf4f154b70383.jpg\"\n    //     alt=\"\"\n    //   /> */}\n    //   <a href=\"https://www.freepnglogos.com/pics/company-logo-ideas\" title=\"Image from freepnglogos.com\"><img src=\"https://www.freepnglogos.com/uploads/company-logo-png/raise-company-logo-digital-product-demo-9.png\" alt=\"Raise company logo, digital product demo\" /></a>\n\n    //   <div className={s.loginBlock}>\n    //     {props.isAuth \n    //       ? <div> {props.login} - <button onClick={props.logout}>Log out</button> </div>\n    //       : <NavLink to={\"/login\"}>Login</NavLink>}\n    //   </div>\n    // </header>\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {BrowserRouter, Route, withRouter, Switch, Redirect, Link} from \"react-router-dom\";\nimport {LoginPage} from './components/Login/LoginPage';\nimport { connect, Provider } from \"react-redux\";\nimport {compose} from \"redux\"\nimport { initializeApp } from './redux/app-reducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { AppStateType } from \"./redux/redux-store\";\nimport { withSuspense } from './hoc/withSuspense';\nimport { UsersPage } from './components/Users/UsersContainer';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport { Header } from './components/Header/Header';\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occurred\");\n    //console.error(promiseRejectionEvent);\n}\ncomponentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n}\ncomponentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n}\n\n  render () {  \n    if (!this.props.initialized){\n        return <Preloader/>\n    }\n\n    return (\n      <Layout>\n      <Header/>\n      <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n        <Sider className=\"site-layout-background\" width={200}>\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={['7']}\n            // defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n              <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\n              <Menu.Item key=\"2\"><Link to=\"/dialogs\">Messages</Link></Menu.Item>\n              <Menu.Item key=\"3\">opt3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n              <Menu.Item key=\"5\"><Link to=\"/developers\">Developers</Link></Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n              <Menu.Item key=\"9\">option9</Menu.Item>\n              <Menu.Item key=\"10\">option10</Menu.Item>\n              <Menu.Item key=\"11\">option11</Menu.Item>\n              <Menu.Item key=\"12\">option12</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n\n        <Switch>\n               <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\n               <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\n               <Route path='/profile/:userId?' render={() => <SuspendedProfile/>} />\n               <Route path='/developers' render={() => <UsersPage pageTitle={\"Sakura\"}/>} />\n               <Route path='/login' render={() => <LoginPage />} />\n               <Route path='*' render={() => <div>404 not found</div>} />\n        </Switch>\n\n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Flame App Network ©2021 Created by Maxwell</Footer>\n  </Layout>\n  //   <div className='app-wrapper'>\n  //       <HeaderContainer />\n  //       <Navbar />\n  //         <div className='app-wrapper-content'>\n  //         <Switch>\n  //             <Route exact path='/' render={() => <Redirect to={\"/profile\"}/>}/>\n  //             <Route path='/dialogs' render={() => <SuspendedDialogs/>}/>\n  //             <Route path='/profile/:userId?' render={() => <SuspendedProfile/>} />\n  //             <Route path='/users' render={() => <UsersPage pageTitle={\"Sakura\"}/>} />\n  //             <Route path='/login' render={() => <LoginPage />} />\n  //             <Route path='*' render={() => <div>404 not found</div>} />\n  //         </Switch>\n  //         </div>\n  // </div>\n  )\n}\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n}) \n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, {initializeApp}))(App);\n\nconst JSApp: React.FC = () => {\n return <BrowserRouter >\n      <Provider store={store}>\n          <AppContainer />\n      </Provider>\n  </BrowserRouter>\n}\n\nexport default JSApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JSApp from \"./App\";\n\nReactDOM.render(<JSApp/>, document.getElementById('root'));\n","import { FieldValidatorType } from '../../../utils/validators/validators';\nimport React from \"react\";\nimport styles from \"./FormsControls.module.css\";\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + ( hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            { hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}> <textarea {...input}{...restProps}/></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport function createField<FormKeysType extends string> (placeholder: string | undefined, name: FormKeysType, validators: Array<FieldValidatorType>, component: React.FC<WrappedFieldProps> , props = {}, text=\"\"){\n        return <div>\n            <Field placeholder={placeholder} \n                   name={name}\n                   validate={validators}\n                   component={component}\n                   {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string> ","import  './Preloader.css';\n\ntype PropsType ={\n\n}\n\nlet Preloader: React.FC<PropsType> = (props) => {\n    return <div className=\"lds-hourglass\"></div>\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};"],"sourceRoot":""}