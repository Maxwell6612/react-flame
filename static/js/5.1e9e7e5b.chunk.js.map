{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","pages/Chat/ChatPage.tsx"],"names":["_objectDestructuringEmpty","obj","TypeError","Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","messages","useSelector","state","chat","style","height","overflowY","map","m","index","message","Message","alt","src","photo","width","userName","AddMessageForm","useState","setMessage","onChange","e","currentTarget","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"oHAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gC,mCCYjCC,EAAiB,WAEnB,IAAMC,EAAWC,cASjB,OAPAC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,kBAEd,IAEI,gCACH,cAAC,EAAD,IACA,cAAC,EAAD,QAIFC,EAAyB,SAAC,GAAQ,KACpC,IAAMC,EAAWC,aAAa,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAElE,OAAO,qBAAKI,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAA1C,SACFN,EAASO,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAAC,EAAD,CAAqBC,QAASF,GAAhBC,SAI5CE,EAAgD,SAAC,GAAe,IAAdD,EAAa,EAAbA,QACpD,OAAO,gCACH,qBAAKE,IAAI,GAAGC,IAAKH,EAAQI,MAAOV,MAAO,CAACW,MAAO,UAD5C,IACuD,4BAAIL,EAAQM,WACtE,uBACCN,EAAQA,QACT,2BAKFO,EAA+B,SAAC,GAAQ,KAC1C,MAA8BC,mBAAS,IAAvC,mBAAOR,EAAP,KAAgBS,EAAhB,KACA,EAAsCD,mBAA8B,WAApE,mBACMxB,GADN,UACiBC,eAWjB,OAAO,gCACJ,8BACE,0BAAUyB,SAAU,SAACC,GAAD,OAAOF,EAAWE,EAAEC,cAAcC,QAAQA,MAAOb,MAEtE,8BACI,wBAAQc,UAAU,EAAOC,QAdN,WAClBf,IAILhB,EAASgC,YAAYhB,IACrBS,EAAW,MAQP,wBAKGQ,UAjEY,WACvB,OAAO,8BACH,cAAC,EAAD","file":"static/js/5.1e9e7e5b.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChatMessageType } from \"../../api/chat-api\";\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../../redux/chat-reducer\";\nimport { AppStateType } from \"../../redux/redux-store\";\n\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat />\n    </div>\n}\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening());\n        }\n    }, [])\n    \n    return <div>\n        <Messages />\n        <AddMessageForm />\n    </div>\n}\n\nconst Messages: React.FC<{}> = ({}) => {\n    const messages = useSelector( (state: AppStateType) => state.chat.messages)\n\n    return <div style={{ height: '400px', overflowY: 'auto'}}>\n        {messages.map((m, index) => <Message key={index} message={m}/>)}\n    </div>\n}\n\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\n    return <div>\n        <img alt='' src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\n        <br/>\n        {message.message}\n        <hr/>\n    </div>\n}\n\n\nconst AddMessageForm: React.FC<{}> = ({}) => {\n    const [message, setMessage] = useState('')\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\n    const dispatch = useDispatch()\n    \n    const sendMessageHandler = () => {\n        if (!message) {\n            return;\n        }\n\n        dispatch(sendMessage(message));\n        setMessage('')\n    }\n\n    return <div>\n       <div\n        ><textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\n       </div> \n        <div>\n            <button disabled={false} onClick={sendMessageHandler}>Send</button>\n        </div>\n    </div>\n}\n\nexport default ChatPage"],"sourceRoot":""}