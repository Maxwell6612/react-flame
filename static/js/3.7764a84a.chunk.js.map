{"version":3,"sources":["components/Profile/MyPosts/Post/MyPosts.module.css","components/Profile/MyPosts/Post/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post/Post.jsx","components/Profile/MyPosts/Post/MyPosts.jsx","components/Profile/MyPosts/Post/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","reverse","map","p","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","isOwner","savePhoto","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","type","target","length","files","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.7764a84a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2BWhL\",\"item\":\"MyPosts_item__HnIIR\",\"postsBlock\":\"MyPosts_postsBlock__3BujM\",\"posts\":\"MyPosts_posts__22lkl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__lEA_2\",\"item\":\"Post_item__2R1qu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img\n        src=\"https://cs16planet.ru/steam-avatars/images/avatar3219.jpg\"\n        alt=\"\"\n      />\n      {props.message}\n      <div>\n        <span>like</span>\n        {props.likesCount}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../../utils/validators/validators\";\nimport { Textarea } from \"../../../common/FormsControls/FormsControls\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = React.memo(props => {\n  let postsElements = [...props.posts]\n  .reverse()\n  .map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n\n  //let newPostElement = React.createRef();\n\n  let onAddPost = (values) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts </h3>\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n\n});\n\nlet AddNewPostForm = (props) => {\n  return <form onSubmit={props.handleSubmit}>\n      <div>\n          <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\n                 validate={[required, maxLength10]} />\n      </div>\n      <div>\n          <button>Add post</button>\n      </div>\n  </form>;\n}\n\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\n\nexport default MyPosts;\n","//import React from 'react';\nimport { addPostActionCreator } from \"../../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {  !editMode &&\n                <div>\n                    <span onDoubleClick={ activateEditMode }>{ props.status || \"----no status\"}</span>\n                </div>\n            }\n            {  editMode && \n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode } value={status}/>\n                </div>\n            }\n        </div>\n    );\n  }\n\nexport default ProfileStatusWithHooks;","import React from 'react'\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/zoom.jpg'\n//import ProfileStatus from \"./ProfileStatus\"\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}) => {\n\n    if (!profile) {\n      return <Preloader />\n    }\n\n    const onMainPhotoselected = (e) => {\n      if (e.target.length) {\n         savePhoto(e.target.files[0]);\n      }\n    }\n\n    return (\n      <div >\n        <div className={s.descriptionBlock}>\n          <img alt='' src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n          { isOwner && <input type={\"file\"} onChange={onMainPhotoselected}/>}\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n    </div>\n  </div>\n    )\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from \"../../redux/profile-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  \n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n        userId = this.props.authorizedUserId;\n        if (!userId) {\n          this.props.history.push(\"/login\")\n        }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId ) {\n        this.refreshProfile();\n    }\n}\n\n  render() {\n    return(\n      <Profile {...this.props} \n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile} \n                status={this.props.status} \n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                />\n    )\n  }\n};\n\nlet mapStateToProps = (state) => {\n  return ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n}\n\nexport default compose(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\n  withRouter\n)(ProfileContainer);"],"sourceRoot":""}