{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/MyPosts.module.css","components/Profile/MyPosts/Post/Post/Post.module.css","components/Profile/MyPosts/Post/Post/Post.jsx","components/Profile/MyPosts/Post/MyPosts.jsx","components/Profile/MyPosts/Post/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.ff40107c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2BWhL\",\"item\":\"MyPosts_item__HnIIR\",\"postsBlock\":\"MyPosts_postsBlock__3BujM\",\"posts\":\"MyPosts_posts__22lkl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__lEA_2\",\"item\":\"Post_item__2R1qu\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img\n        src=\"https://cs16planet.ru/steam-avatars/images/avatar3219.jpg\"\n        alt=\"\"\n      />\n      {props.message}\n      <div>\n        <span>like</span>\n        {props.likesCount}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../../utils/validators/validators\";\nimport { Textarea } from \"../../../common/FormsControls/FormsControls\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = React.memo(props => {\n  let postsElements = [...props.posts]\n  .reverse()\n  .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n  //let newPostElement = React.createRef();\n\n  let onAddPost = (values) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts </h3>\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n\n});\n\nlet AddNewPostForm = (props) => {\n  return <form onSubmit={props.handleSubmit}>\n      <div>\n          <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\n                 validate={[required, maxLength10]} />\n      </div>\n      <div>\n          <button>Add post</button>\n      </div>\n  </form>;\n}\n\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\n\nexport default MyPosts;\n","//import React from 'react';\nimport { addPostActionCreator } from \"../../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {  !editMode &&\n                <div>\n                   <b>Status: </b><span onDoubleClick={ activateEditMode }>{ props.status || \"----no status\"}</span>\n                </div>\n            }\n            {  editMode && \n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode } value={status}/>\n                </div>\n            }\n        </div>\n    );\n  }\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {reduxForm} from \"redux-form\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>save</button></div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            { createField(\"About me\", \"aboutMe\", [], Textarea  )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/zoom.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img alt='' src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })}\n        </div>\n    </div>\n}\n\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  \n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n        userId = this.props.authorizedUserId;\n        if (!userId) {\n          this.props.history.push(\"/login\")\n        }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId ) {\n        this.refreshProfile();\n    }\n}\n\n  render() {\n    return(\n      <Profile {...this.props} \n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile} \n                status={this.props.status} \n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                />\n    )\n  }\n};\n\nlet mapStateToProps = (state) => {\n  return ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n}\n\nexport default compose(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n  withRouter\n)(ProfileContainer);"],"sourceRoot":""}