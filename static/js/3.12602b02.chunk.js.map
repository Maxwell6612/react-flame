{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/MyPosts.module.css","components/Profile/MyPosts/Post/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/Post/Post/Post.tsx","components/Profile/MyPosts/Post/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","reduxForm","form","props","onSubmit","handleSubmit","createField","required","Input","Post","className","s","item","src","alt","message","likesCount","MyPosts","postsElements","posts","reverse","map","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","type","Textarea","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.12602b02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__2BWhL\",\"item\":\"MyPosts_item__HnIIR\",\"postsBlock\":\"MyPosts_postsBlock__3BujM\",\"posts\":\"MyPosts_posts__22lkl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__lEA_2\",\"item\":\"Post_item__2R1qu\"};","import React from 'react';\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { required } from '../../../../utils/validators/validators';\nimport { createField, GetStringKeys, Input } from '../../../common/FormsControls/FormsControls';\n\ntype PropsType = {\n\n}\n\nexport type AddPostFormValuesType = {\n    newPostText: string\n  }\n\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    {createField<AddPostFormValuesTypeKeys>(\"Your post\", \"newPostText\", [required], Input)}\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)","import React from \"react\";\nimport s from \"./Post.module.css\";\n\ntype PropsType = {\n  message: string,\n  likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img\n        src=\"https://cs16planet.ru/steam-avatars/images/avatar3219.jpg\"\n        alt=\"\"\n      />\n      {props.message}\n      <div>\n        <span>like</span>\n        {props.likesCount}\n      </div>\n    </div>\n  );\n};\n\nexport default Post;","import React from \"react\";\nimport { PostType } from \"../../../../types/types\";\nimport AddPostForm, { AddPostFormValuesType } from \"../AddPostForm/AddPostForm\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\n\nexport type MapPropsType = {\n  posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n  addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements = [...props.posts]\n    .reverse()\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n  \n    let onAddPost = (values: AddPostFormValuesType) => {\n      props.addPost(values.newPostText);\n    };\n  \n    return (\n      <div className={s.postsBlock}>\n        <h3>My posts </h3>\n        <AddPostForm onSubmit={onAddPost}/>\n        <div className={s.posts}>{postsElements}</div>\n      </div>\n    );\n  \n}\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","//import React from 'react';\nimport { actions } from \"../../../../redux/profile-reducer\";\nimport MyPosts, { DispatchPropsType, MapPropsType } from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport { AppStateType } from \"../../../../redux/redux-store\";\n\nconst mapStateToProps = (state: AppStateType) => {\n  return {\n    posts: state.profilePage.posts,\n  }\n} \n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType >(mapStateToProps, {\n  addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {  !editMode &&\n                <div>\n                   <b>Status: </b><span onDoubleClick={ activateEditMode }>{ props.status || \"----no status\"}</span>\n                </div>\n            }\n            {  editMode && \n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode } value={status}/>\n                </div>\n            }\n        </div>\n    );\n  }\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport { ProfileType } from \"../../../types/types\";\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>save</button></div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/zoom.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport { ContactsType, ProfileType } from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        //todo remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img alt='' src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = { \n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {\n                Object\n                    .keys(profile.contacts)\n                    .map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\ntype ContactsPropsType = {\n    contactTitle: string \n    contactValue: string\n}\n\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;","import React from \"react\";\nimport { ProfileType } from \"../../types/types\";\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = (props) => {\n  return (\n    <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { ProfileType } from \"../../types/types\";\n\ntype MapStateType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  getUserProfile: ( userId: number ) => void\n  getStatus: ( userId: number) => void\n  updateStatus: ( status: string ) => void\n  savePhoto:  ( file: File ) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapStateType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<PropsType> {\n  \n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n        userId = this.props.authorizedUserId;\n        if (!userId) {\n          this.props.history.push(\"/login\")\n        }\n    }\n    if (!userId) {\n      console.error(\"Id should exists in URI params or in state ('authorizedUserId')\");\n    } else {\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId ) {\n        this.refreshProfile();\n    }\n}\n\n  render() {\n    return(\n      <Profile {...this.props} \n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile} \n                status={this.props.status} \n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                />\n    )\n  }\n};\n\nlet mapStateToProps = (state: AppStateType) => {\n  return ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n}\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n  withRouter\n)(ProfileContainer);"],"sourceRoot":""}