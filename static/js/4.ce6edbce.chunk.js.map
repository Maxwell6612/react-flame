{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/Dialogsitem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCanKC,EAVI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACY,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCA/BC,EANC,SAACT,GACb,OACI,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,yCCCnCC,EAAcC,YAAiB,IAetBC,cAAU,CAACC,KAAM,wBAAjBD,EAbQ,SAACb,GACtB,OACE,uBAAMe,SAAUf,EAAMgB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUV,GAAcH,KAAM,iBAAkBc,YAAY,yBAErG,8BACE,kDCkBOC,EAzBC,SAACvB,GACf,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBN,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAC3E4B,EAAmBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE9B,OAOpF,OAAKF,EAAMiC,OAGT,sBAAK9B,UAAWC,IAAEuB,QAAlB,UACE,qBAAKxB,UAAWC,IAAE8B,aAAlB,SAAiCR,IACjC,qBAAKvB,UAAWC,IAAE2B,SAAlB,SACE,8BAAMD,MAGR,cAAC,EAAD,CAAgBf,SAbA,SAACoB,GACnBnC,EAAMoC,YAAYD,EAAOE,sBAGD,cAAC,IAAD,CAAU9B,GAAI,Y,+CCftC+B,EAA6B,SAACd,GAAD,MAAY,CACzCS,OAAQT,EAAMe,KAAKN,S,OCgBRO,sBACbC,aAdoB,SAACjB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAGE,SAACiB,GACxB,MAAO,CACLN,YAAa,SAACC,GACZK,EAASC,YAAmBN,UDPF,SAACO,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAK9C,MAAMiC,OACT,cAACW,EAAD,eAAeE,KAAK9C,QADI,cAAC,IAAD,CAAUO,GAAG,eAHT,GACXwC,IAAMH,WAStC,OAFsCH,YAAQH,EAARG,CAAoCI,KCI/DL,CAGbjB","file":"static/js/4.ce6edbce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react' \nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n                    <NavLink to={path}>{props.name}</NavLink>\n                </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react' \nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return (\n        <div className={s.dialog}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={Textarea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder=\"Enter your message\"/>\n      </div>\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  );\n}\n\nexport default reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/Dialogsitem.jsx\";\nimport Message from \"./Message/Message.jsx\";\nimport { Redirect } from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\n\nconst Dialogs = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\n  let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\n  //let newMessageBody = state.newMessageBody;\n\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  if (!props.isAuth) return <Redirect to={\"/login\"}/>;\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        <div>{messagesElements}</div>\n            \n      </div>\n      <AddMessageForm onSubmit={addNewMessage}/>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({ \n    isAuth: state.auth.isAuth\n  });\n\n  \nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login' />\n            return <Component {...this.props} />\n        }\n    }\n      \n     let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","import {\n  sendMessageCreator\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    }\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}